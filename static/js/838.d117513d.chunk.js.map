{"version":3,"file":"static/js/838.d117513d.chunk.js","mappings":"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","sources":["redux/contacts/contactsSelectors.js","components/AddContact/AddContact.styled.js","components/Modal/Modal.styled.js","components/FormPhonebook/FormPhonebook.styled.jsx","components/FormPhonebook/FormPhonebook.jsx","components/Modal/Modal.jsx","components/AddContact/AddContact.jsx","components/Filter/Filter.styled.js","redux/filter/filter.selectors.js","components/Filter/Filter.jsx","components/ContactsList/ContactsList.styled.js","components/ContactsList/ContactsList.jsx","pages/Contacts.js"],"sourcesContent":["export const selectLoading = state => state.contacts.isLoading;\nexport const selectContacts = state => state.contacts.items;\n","import styled from 'styled-components';\n\nexport const Button = styled.button`\n  padding: 10px 20px;\n  min-width: 300px;\n  background-color: var(--accentColor);\n  box-shadow: 0px 4px 4px rgba(0, 0, 0, 0.15);\n  border-radius: 4px;\n  margin: 0 0 40px 0;\n  border: none;\n  outline: none;\n  opacity: 0.8;\n  transition: opacity 250ms var(--timingFn);\n\n  cursor: pointer;\n  color: #fff;\n  font-weight: 700;\n  font-size: 16px;\n  text-transform: uppercase;\n\n  &:hover {\n    opacity: 1;\n  }\n`;\n","import styled from 'styled-components';\nimport { IoCloseCircleOutline } from 'react-icons/io5';\n\nexport const Overlay = styled.div`\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100vw;\n  height: 100vh;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: rgba(0, 0, 0, 0.8);\n  z-index: 1200;\n`;\n\nexport const ModalAddContact = styled.div`\n  position: relative;\n  padding: 50px 30px 0 30px;\n  max-width: calc(100vw - 48px);\n  max-height: calc(100vh - 24px);\n  border: 1px solid var(--accentColor);\n  border-radius: 10px;\n  box-shadow: 0px 4px 4px rgba(0, 0, 0, 0.15);\n  opacity: 0.8;\n  transition: opacity 250ms var(--timingFn);\n`;\n\nexport const CloseBtn = styled.button`\n  position: absolute;\n  top: 10px;\n  right: 10px;\n  background: transparent;\n  border: none;\n  padding: 0;\n`;\n\nexport const CloseIcon = styled(IoCloseCircleOutline)`\n  width: 32px;\n  height: 32px;\n  color: var(--accentColor);\n  transition: opacity 250ms var(--timingFn);\n\n  &:hover {\n    scale: 1.1;\n    color: red;\n  }\n`;\n","import styled from 'styled-components';\nimport { Form, Field } from 'formik';\n\nexport const Formfield = styled(Form)`\n  margin-top: 10px;\n  margin-bottom: 30px;\n  text-align: center;\n`;\n\nexport const Input = styled(Field)`\n  display: block;\n  margin-left: auto;\n  margin-right: auto;\n  padding: 10px;\n  width: 250px;\n  border: 1px solid rgba(33, 33, 33, 0.2);\n  border-radius: 4px;\n  cursor: pointer;\n  font-size: 15px;\n\n  &:focus {\n    outline-color: var(--accentColor);\n  }\n\n  &:hover {\n    border: 1px solid var(--accentColor);\n  }\n\n  &:hover::-webkit-input-placeholder {\n    color: var(--accentColor);\n  }\n`;\n\nexport const Button = styled.button`\n  padding: 10px 20px;\n  margin-top: 15px;\n  background-color: var(--accentColor);\n  box-shadow: 0px 4px 4px rgba(0, 0, 0, 0.15);\n  border-radius: 4px;\n  border: none;\n  outline: none;\n  opacity: 0.8;\n  transition: opacity 250ms var(--timingFn);\n\n  cursor: pointer;\n  color: #fff;\n  font-weight: 700;\n  font-size: 16px;\n  text-transform: uppercase;\n\n  &:hover {\n    opacity: 1;\n  }\n`;\n\nexport const Label = styled.label`\n  display: block;\n  margin-bottom: 20px;\n  color: var(--secondaryTextColor);\n  font-weight: 500;\n  font-size: 20px;\n\n  &:hover {\n    color: var(--accentColor);\n  }\n`;\n","import { Formik, ErrorMessage } from 'formik';\nimport * as yup from 'yup';\nimport { Formfield, Input, Label, Button } from './FormPhonebook.styled';\nimport { contactsOperations, contactsSelectors } from 'redux/contacts';\nimport { useDispatch, useSelector } from 'react-redux';\n\nexport default function FormPhonebook({ closeModal }) {\n  const contacts = useSelector(contactsSelectors.selectContacts);\n  const dispatch = useDispatch();\n\n  const initialValues = {\n    name: '',\n    phone: '',\n    email: '',\n  };\n\n  const patternName =\n    /^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$/;\n\n  const patternNumber =\n    /\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}/;\n\n  const schema = yup.object().shape({\n    name: yup\n      .string()\n      .min(2, 'Name is too Short!')\n      .max(30, 'name is too Long!')\n      .matches(\n        patternName,\n        'Name may contain only latin letters, apostrophe, dash and spaces.'\n      )\n      .required(),\n    phone: yup\n      .string()\n      .min(6, 'Phone number must be less than 6 characters')\n      .matches(patternNumber, 'Phone number is not valid')\n      .required(),\n    email: yup.string().min(6, 'Email must be less than 6 characters'),\n  });\n\n  const handleSubmit = ({ name, phone, email }, { resetForm }) => {\n    if (\n      contacts.find(\n        contact => contact.name.toLowerCase() === name.toLowerCase().trim()\n      )\n    ) {\n      alert(`${name} is already in contacts.`);\n      resetForm();\n    } else if (contacts.find(contact => contact.phone === phone)) {\n      alert(`${phone} is already in contacts.`);\n      resetForm();\n    } else {\n      dispatch(contactsOperations.addContact({ name, phone, email }));\n      resetForm();\n      closeModal();\n    }\n  };\n\n  return (\n    <Formik\n      initialValues={initialValues}\n      onSubmit={handleSubmit}\n      validationSchema={schema}\n    >\n      <Formfield autoComplete=\"off\">\n        <Label>\n          Name\n          <Input type=\"text\" name=\"name\" />\n          <ErrorMessage\n            name=\"name\"\n            component=\"div\"\n            style={{ color: '#d95d5d' }}\n          />\n        </Label>\n        <Label>\n          Phone\n          <Input type=\"tel\" name=\"phone\" />\n          <ErrorMessage\n            name=\"phone\"\n            component=\"div\"\n            style={{ color: '#d95d5d' }}\n          />\n        </Label>\n        <Label>\n          Email\n          <Input type=\"email\" name=\"email\" />\n          <ErrorMessage\n            name=\"email\"\n            component=\"div\"\n            style={{ color: '#d95d5d' }}\n          />\n        </Label>\n        <Button type=\"submit\">Add contact</Button>\n      </Formfield>\n    </Formik>\n  );\n}\n","import { Overlay, ModalAddContact, CloseBtn, CloseIcon } from './Modal.styled';\nimport FormPhonebook from 'components/FormPhonebook';\nimport { createPortal } from 'react-dom';\n\nconst modalRoot = document.querySelector('#modal-root');\n\nexport const Modal = ({ closeModal }) => {\n  return createPortal(\n    <Overlay>\n      <ModalAddContact>\n        <CloseBtn type=\"button \" onClick={closeModal}>\n          <CloseIcon />\n        </CloseBtn>\n        <FormPhonebook closeModal={closeModal} />\n      </ModalAddContact>\n    </Overlay>,\n    modalRoot\n  );\n};\n","import React, { useState } from 'react';\nimport { Button } from './AddContact.styled';\nimport { Modal } from 'components/Modal';\n\nexport const AddContact = () => {\n  const [isModalOpen, setIsModalOpen] = useState(false);\n\n  const toggleModal = () => {\n    setIsModalOpen(!isModalOpen);\n  };\n\n  return (\n    <>\n      <Button type=\"button\" onClick={toggleModal}>\n        Add Contact\n      </Button>\n      {isModalOpen && <Modal closeModal={toggleModal} />}\n    </>\n  );\n};\n","import styled from 'styled-components';\n\nexport const Label = styled.label`\n  display: block;\n  margin-top: 10px;\n  color: var(--secondaryTextColor);\n  font-weight: 500;\n  font-size: 18px;\n`;\nexport const Input = styled.input`\n  display: block;\n  margin-left: auto;\n  margin-right: auto;\n  margin-top: 10px;\n  padding: 10px;\n  width: 50%;\n  border: 1px solid rgba(33, 33, 33, 0.2);\n  border-radius: 4px;\n  cursor: pointer;\n  font-size: 15px;\n\n  &:focus {\n    outline-color: var(--accentColor);\n  }\n\n  &:hover {\n    border: 1px solid var(--accentColor);\n  }\n`;\n","export const getFilterValue = state => state.filter.filter;\n","import { Label, Input } from './Filter.styled';\nimport { useDispatch } from 'react-redux';\nimport { useSelector } from 'react-redux';\nimport { changeFilter } from 'redux/filter/filterSlice';\nimport { getFilterValue } from 'redux/filter/filter.selectors';\n\nfunction Filter() {\n  const dispatch = useDispatch();\n  const value = useSelector(getFilterValue);\n\n  const changeInput = event => {\n    dispatch(changeFilter(event.currentTarget.value));\n  };\n\n  return (\n    <Label>\n      Find contacts by name\n      <Input type=\"text\" value={value} onChange={changeInput} />\n    </Label>\n  );\n}\n\nexport default Filter;\n","import styled from 'styled-components';\n\nexport const ContactsList = styled.ul`\n  margin-top: 30px;\n  padding: 10px;\n  color: var(--secondaryTextColor);\n  font-weight: 500;\n  font-size: 18px;\n  box-shadow: 0px 4px 4px rgba(0, 0, 0, 0.15);\n`;\n\nexport const ContactsItem = styled.li`\n  display: grid;\n  grid-template-columns: 3fr 3fr 3fr 1fr;\n  &:not(:last-child) {\n    margin-bottom: 10px;\n  }\n\n  &:hover {\n    border-bottom: 1px solid var(--accentColor);\n  }\n`;\n\nexport const ContactsText = styled.p`\n  font-size: 12px;\n`;\n\nexport const Button = styled.button`\n  width: 30px;\n  height: auto;\n  cursor: pointer;\n  background-color: transparent;\n  border: none;\n  outline: none;\n  transition: transform 250ms var(--timingFn);\n\n  &:hover {\n    transform: scale(1.3);\n  }\n`;\n","import { TiTimesOutline } from 'react-icons/ti';\nimport {\n  ContactsList,\n  ContactsItem,\n  ContactsText,\n  Button,\n} from './ContactsList.styled';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getFilterValue } from 'redux/filter/filter.selectors';\nimport { contactsOperations, contactsSelectors } from 'redux/contacts';\n\nconst getFilterContacts = (contacts, filter) => {\n  const normalizedFilter = filter.toLowerCase();\n  const filterContact = contacts.filter(contact =>\n    contact.name.toLowerCase().includes(normalizedFilter)\n  );\n  return filterContact;\n};\n\nfunction Contacts() {\n  const dispatch = useDispatch();\n  const contacts = useSelector(contactsSelectors.selectContacts);\n  const filter = useSelector(getFilterValue);\n\n  const filteredContacts = getFilterContacts(contacts, filter);\n\n  return (\n    <ContactsList>\n      {filteredContacts.map(({ _id, name, phone, email }) => (\n        <ContactsItem key={_id}>\n          <ContactsText>{name}</ContactsText>\n          <ContactsText>{phone}</ContactsText>\n          <ContactsText>{email}</ContactsText>\n          <Button\n            type=\"button\"\n            onClick={() => {\n              dispatch(contactsOperations.deleteContact(_id));\n            }}\n          >\n            <TiTimesOutline\n              style={{\n                color: 'var(--accentColor)',\n              }}\n            />\n          </Button>\n        </ContactsItem>\n      ))}\n    </ContactsList>\n  );\n}\n\nexport default Contacts;\n","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { contactsOperations, contactsSelectors } from 'redux/contacts';\n\nimport Container from 'components/Container';\nimport { AddContact } from 'components/AddContact';\nimport Filter from 'components/Filter';\nimport ContactsList from 'components/ContactsList';\n\nexport default function Contacts() {\n  const contacts = useSelector(contactsSelectors.selectContacts);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(contactsOperations.fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <Container>\n      <AddContact />\n      <h2>Contacts</h2>\n      {contacts.length > 1 && <Filter />}\n      {contacts.length > 0 ? (\n        <ContactsList />\n      ) : (\n        <p style={{ color: 'red' }}>\n          Your phonebook is empty. Please add contact.\n        </p>\n      )}\n    </Container>\n  );\n}\n"],"names":["selectContacts","state","contacts","items","Button","styled","Overlay","ModalAddContact","CloseBtn","CloseIcon","IoCloseCircleOutline","Formfield","Form","Input","Field","Label","FormPhonebook","closeModal","useSelector","contactsSelectors","dispatch","useDispatch","schema","yup","shape","name","min","max","matches","required","phone","email","initialValues","onSubmit","resetForm","find","contact","toLowerCase","trim","alert","contactsOperations","addContact","validationSchema","autoComplete","type","component","style","color","modalRoot","document","querySelector","Modal","createPortal","onClick","AddContact","useState","isModalOpen","setIsModalOpen","toggleModal","getFilterValue","filter","value","onChange","event","changeFilter","currentTarget","ContactsList","ContactsItem","ContactsText","filteredContacts","normalizedFilter","includes","getFilterContacts","map","_id","deleteContact","Contacts","useEffect","fetchContacts","Container","length"],"sourceRoot":""}